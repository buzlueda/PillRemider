// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PillReminder.Infrastructure.Persistence.Contexts;

#nullable disable

namespace PillReminder.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PillReminderDbContext))]
    [Migration("20250315110827_Migration_20250315_140820")]
    partial class Migration_20250315_140820
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_Categories");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 11, 8, 27, 208, DateTimeKind.Utc).AddTicks(7795),
                            Description = "Baş ağrısı, kas ağrısı, romatizma gibi ağrılar için ilaçlar",
                            Name = "Ağrı Kesiciler"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 11, 8, 27, 208, DateTimeKind.Utc).AddTicks(8073),
                            Description = "Bakteriyel enfeksiyonları tedavi eden ilaçlar",
                            Name = "Antibiyotikler"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 15, 11, 8, 27, 208, DateTimeKind.Utc).AddTicks(8074),
                            Description = "Bağışıklık sistemini güçlendiren vitamin ve besin takviyeleri",
                            Name = "Vitaminler & Takviyeler"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 3, 15, 11, 8, 27, 208, DateTimeKind.Utc).AddTicks(8075),
                            Description = "Depresyon, anksiyete ve diğer psikiyatrik rahatsızlıklar için ilaçlar",
                            Name = "Antidepresanlar"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 15, 11, 8, 27, 208, DateTimeKind.Utc).AddTicks(8076),
                            Description = "Alerji semptomlarını hafifletmek için kullanılan ilaçlar",
                            Name = "Alerji İlaçları"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 3, 15, 11, 8, 27, 208, DateTimeKind.Utc).AddTicks(8088),
                            Description = "Şeker hastalığının yönetimi için ilaçlar",
                            Name = "Diyabet İlaçları"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 15, 11, 8, 27, 208, DateTimeKind.Utc).AddTicks(8089),
                            Description = "Yüksek tansiyonu kontrol altına almak için ilaçlar",
                            Name = "Tansiyon İlaçları"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 3, 15, 11, 8, 27, 208, DateTimeKind.Utc).AddTicks(8090),
                            Description = "Soğuk algınlığı ve grip semptomlarını hafifletici ilaçlar",
                            Name = "Soğuk Algınlığı & Grip"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 3, 15, 11, 8, 27, 208, DateTimeKind.Utc).AddTicks(8092),
                            Description = "Mide yanması, reflü, hazımsızlık gibi sorunlar için ilaçlar",
                            Name = "Mide & Sindirim Sistemi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 3, 15, 11, 8, 27, 208, DateTimeKind.Utc).AddTicks(8093),
                            Description = "Egzama, sedef hastalığı ve akne gibi cilt hastalıkları için ilaçlar",
                            Name = "Cilt Hastalıkları İçin"
                        });
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<decimal>("Dosage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Dosage");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_Medications");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("Medications", (string)null);
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OperationClaimId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedAt");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_OperationClaims");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 14, 8, 27, 213, DateTimeKind.Local).AddTicks(6653),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 14, 8, 27, 215, DateTimeKind.Local).AddTicks(6743),
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RefreshTokenId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedByIp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedAt");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpirationDate");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReasonRevoked");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReplacedByToken");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RevokedByIp");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RevokedDate");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_RefreshTokens");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReminderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedAt");

                    b.Property<int>("FrequencyType")
                        .HasColumnType("int")
                        .HasColumnName("FrequencyType");

                    b.Property<int?>("IntervalHours")
                        .HasColumnType("int")
                        .HasColumnName("IntervalHours");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int")
                        .HasColumnName("MedicationId");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Notes");

                    b.PrimitiveCollection<string>("TimesOfDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TimesOfDay");

                    b.HasKey("Id")
                        .HasName("PK_Reminders");

                    b.HasIndex("MedicationId");

                    b.ToTable("Reminders", (string)null);
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Abbreviation");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedAt");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_Units");

                    b.ToTable("Units", (string)null);
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int")
                        .HasColumnName("OperationClaimId");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<string>("ProfilePhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProfilePhotoUrl");

                    b.Property<string>("TCNO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TCNO");

                    b.Property<int?>("UserAddressId")
                        .HasColumnType("int")
                        .HasColumnName("UserAddressId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Username");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.HasIndex("OperationClaimId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.Medication", b =>
                {
                    b.HasOne("PillReminder.Core.Domain.Entities.Category", "Category")
                        .WithMany("Medications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PillReminder.Core.Domain.Entities.Unit", "Unit")
                        .WithMany("Medications")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PillReminder.Core.Domain.Entities.User", "User")
                        .WithMany("Medications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("PillReminder.Core.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.Reminder", b =>
                {
                    b.HasOne("PillReminder.Core.Domain.Entities.Medication", "Medication")
                        .WithMany("Reminders")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.User", b =>
                {
                    b.HasOne("PillReminder.Core.Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("Users")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.Category", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.Medication", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.Unit", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("PillReminder.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("Medications");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
